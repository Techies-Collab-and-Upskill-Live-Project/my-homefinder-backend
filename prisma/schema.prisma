// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  phone        String   @unique
  password     String
  isVerified   Boolean  @default(false)
  roleId       Int
  role         Role     @relation(fields: [roleId], references: [id])
  reviewsGiven Review[] @relation("Reviewer")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Password reset tokens
  passwordResetTokens PasswordResetToken[]
  UserDocument        UserDocument[]
  properties          Property[]

  //landlord and tenant profile
  tenants   TenantProfile[]
  landlords LandLordProfile[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserDocument {
  id         String             @id @default(uuid())
  userId     String
  fileName   String
  fileUrl    String
  status     VerificationStatus @default(PENDING)
  uploadedAt DateTime           @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Property {
  id          String          @id @default(uuid())
  title       String
  description String
  price       Float
  type        PropertyType
  address     String
  city        String
  state       String
  country     String
  latitude    Float?
  longitude   Float?
  isAvailable Boolean         @default(true)
  landlordId  String
  landlord    User            @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deleted     Boolean         @default(false)
  images      PropertyImage[]

  // future support for messages, documents, bookings
  reviews Review[]

  messages Message[] @relation("PropertyMessages")
}

model PropertyImage {
  id         String   @id @default(uuid())
  propertyId String
  url        String
  createdAt  DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum PropertyType {
  HOUSE
  APARTMENT
  STUDIO
  ROOM
  OFFICE
}

model TenantProfile {
  id           Int    @id @default(autoincrement())
  profileImage String
  fullName     String
  phoneNumber  String @unique
  street       String
  city         String
  state        String
  NIN          String @unique
  userId       String
  user         User   @relation(fields: [userId], references: [id])
}

model LandLordProfile {
  id             Int        @id @default(autoincrement())
  profileImage   String
  typeOfHouse    String
  numberOfRooms  String
  otherInfo      String
  street         String
  preference     Preference @default(calls)
  NIN            String     @unique
  driversLicense String     @unique
  BVN            String     @unique
  userId         String
  user           User       @relation(fields: [userId], references: [id])
}

model Message {
  id         String    @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  propertyId String?
  createdAt  DateTime  @default(now())
  sender     User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  property   Property? @relation("PropertyMessages", fields: [propertyId], references: [id])
}

enum Preference {
  calls
  chat
  both
}

enum StarRating {
  ONE   @map("1")
  TWO   @map("2")
  THREE @map("3")
  FOUR  @map("4")
  FIVE  @map("5")
}

model Review {
  id         String     @id @default(uuid())
  reviewerId String
  propertyId String
  rating     StarRating
  comment    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  reviewer User     @relation("Reviewer", fields: [reviewerId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
}
